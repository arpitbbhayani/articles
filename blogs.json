[
  {
    "id": "string-interning",
    "title": "String Interning in Python",
    "description": "String Interning in Python",
    "image": "https://user-images.githubusercontent.com/4745789/102710262-1c971f80-42d7-11eb-9ee4-dcefd540e869.png",
    "gif": "https://media.giphy.com/media/KRNBl0iSS8gg0/giphy.gif",
    "categories": [
      "python"
    ],
    "tags": [
      "compiler optimization",
      "string interning",
      "cpython internals"
    ],
    "published_at": "2020-12-20",
    "similar": [
      "fsm",
      "python-iterable-integers",
      "mongodb-cursor-skip-is-slow",
      "idf"
    ]
  },
  {
    "id": "recursion-visualizer",
    "title": "A Simple Recursion Tree Visualizer for Python",
    "description": "One of the most complicated concepts to wrap our heads around has to be recursion; to understand it well it always helps to have some sort of recursion visualization. In this essay, we build a super-simple yet effective visualizer for recursive functions in Python.",
    "image": "https://user-images.githubusercontent.com/4745789/102006828-0ffc4f80-3d4a-11eb-8ab1-0891dc5ba00f.png",
    "gif": "https://media.giphy.com/media/3ov9jQX2Ow4bM5xxuM/giphy.gif",
    "categories": [
      "python"
    ],
    "tags": [
      "recursion tree",
      "visualize recursion",
      "print recursion tree",
      "recursion tree visualizer for Python"
    ],
    "published_at": "2020-12-13",
    "similar": [
      "fsm",
      "python-iterable-integers",
      "mongodb-cursor-skip-is-slow",
      "idf"
    ]
  },
  {
    "id": "flajolet-martin",
    "title": "Approximate Count-Distinct using Flajolet Martin Algorithm",
    "description": "Measuring distinct elements from a stream of values is one of the most common utilities that finds its application across the spectrum. Most of these use cases do not expect accurate count-distinct rather they expect it to be computed very quickly and efficiently. In this essay, we deep dive into one of the first Count-Distinct approximation algorithm called Flajlet-Martin Algorithm.",
    "image": "https://user-images.githubusercontent.com/4745789/101244544-31977e80-372d-11eb-9ab4-d9e879496d39.png",
    "gif": "https://media.giphy.com/media/cRMgB2wjHhVN2tDD2z/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "approximation algorithm",
      "count-distinct approximation",
      "flajolet algorithm",
      "fm algorithm"
    ],
    "published_at": "2020-12-06",
    "similar": [
      "slowsort",
      "copy-on-write",
      "isolation-forest",
      "inheritance-c"
    ]
  },
  {
    "id": "2q-cache",
    "title": "2Q Cache Management Algorithm",
    "description": "LRU is one of the most widely used cache eviction algorithms suffers from a bunch of limitations especially when used for managing caches in disk-backed databases. 2Q remediates the limitations and improves upon it by adding multiple parallel buffers.",
    "image": "https://user-images.githubusercontent.com/4745789/100538603-bf1f2e00-3256-11eb-87dc-32594b25ae30.png",
    "gif": "https://media.giphy.com/media/cfuL5gqFDreXxkWQ4o/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "postgres internals",
      "cache management algorithm"
    ],
    "published_at": "2020-11-29",
    "similar": [
      "mysql-cache",
      "ts-smoothing",
      "image-steganography",
      "better-programmer"
    ]
  },
  {
    "id": "israeli-queues",
    "title": "Israeli Queues",
    "description": "Israeli Queues are fondly named after a peculiar behavior observed in Israel. This behavior was mimicked to solve a very particular problem in Polling Systems. In this essay, we find what makes the Israeli Queue different than the traditional FIFO Queue and how it efficiently addresses the problem at hand.",
    "image": "https://user-images.githubusercontent.com/4745789/99896424-64b22a80-2cb6-11eb-92b2-ed1f44a76ba1.png",
    "gif": "https://media.giphy.com/media/3orif9DJNKDfXqXbBS/giphy.gif",
    "categories": [
      "data-structure"
    ],
    "tags": [
      "data structure",
      "priority queue",
      "israeli queue"
    ],
    "published_at": "2020-11-22",
    "similar": [
      "morris-counter",
      "flajolet-martin",
      "slowsort",
      "rule-30"
    ]
  },
  {
    "id": "1d-terrain",
    "title": "1D Procedural Terrain Generation",
    "description": "Terrains are at the heart of every Computer Game - be it Counter-Strike, Age of Empires, or even Minecraft. The virtual world that these games generate is the key to a great gaming experience. Generating terrain, manually, requires a ton of effort and hence it makes sense to auto-generate a pseudorandom terrain using some procedure. In this essay, we take a detailed look into generating pseudorandom one-dimensional terrain that is very close to real ones.",
    "image": "https://user-images.githubusercontent.com/4745789/99261379-a9ffd380-2842-11eb-8f50-36b36ed42a95.png",
    "gif": "https://media.giphy.com/media/xT5LMTf2CRdBhetWPC/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "algorithm",
      "terrain generation",
      "perlin noise",
      "random terrain generation"
    ],
    "published_at": "2020-11-16",
    "similar": [
      "idf",
      "jaccard-minhash",
      "slowsort",
      "efficient-way-to-stop-an-iterating-loop"
    ]
  },
  {
    "id": "jaccard-minhash",
    "title": "Set Similarity using Jaccard Similarity Coefficient and MinHash",
    "description": "Set similarity measure finds its application spanning the Computer Science spectrum; some applications being - user segmentation, finding near-duplicate webpages/documents, clustering, recommendation generation, sequence alignment, and many more. In this essay, we take a detailed look into a set-similarity measure called - Jaccard's Similarity Coefficient and how its computation can be optimized using a neat technique called MinHash.",
    "image": "https://user-images.githubusercontent.com/4745789/98465225-c4580280-21ed-11eb-9f1f-6508ed229925.png",
    "gif": "https://media.giphy.com/media/yvXWADxQxRMkQ4eEID/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "set similarity",
      "jaccard similarity coefficient",
      "jaccard index",
      "minhash",
      "minhash signature"
    ],
    "published_at": "2020-11-08",
    "similar": [
      "idf",
      "1d-terrain",
      "mongodb-cursor-skip-is-slow",
      "python-caches-integers"
    ]
  },
  {
    "id": "ts-smoothing",
    "title": "Time Series Smoothing - Making Aberrations Stand Out",
    "description": "Time Series smoothing algorithms removes short-term irregularities from the plot while preserving long-term trends. But as an observer, it is important that such smoothing techniques or irregularities do not mask anomalies that need attention. In this essay, we take a look at a smoothing algorithm that smooths out a time series plot while making aberrations and anomalies standout.",
    "image": "https://user-images.githubusercontent.com/4745789/97785060-cbb55580-1bc8-11eb-9d6d-91ff16cc2ddc.png",
    "gif": "https://media.giphy.com/media/3orieVe5VYqTdT16qk/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "time series smoothing",
      "statistics",
      "kurtosis smoothing"
    ],
    "published_at": "2020-11-01",
    "similar": [
      "better-programmer",
      "image-steganography",
      "2q-cache",
      "benchmark-and-compare-pagination-approach-in-mongodb"
    ]
  },
  {
    "id": "lfu",
    "title": "Constant Time LFU",
    "description": "The most popular implementation of the LFU Cache Eviction Scheme, using a min-heap, implements all three operations with running time complexity of O(log n) and this makes LFU sub-optimal. In this essay, we take a detailed look at a clever algorithm that implements LFU such that all the operations happen with O(1) running time complexity.",
    "image": "https://user-images.githubusercontent.com/4745789/89711582-cf11ba00-d9a8-11ea-9173-c7069b1537b5.png",
    "gif": "https://media.giphy.com/media/fWqGY1AC4HVIN3lRyB/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "caching",
      "lfu",
      "least frequently used",
      "cache eviction algorithm",
      "least frequently used",
      "constant time"
    ],
    "published_at": "2020-08-23",
    "similar": [
      "consistent-hashing",
      "flajolet-martin",
      "phi-accrual",
      "copy-on-write"
    ]
  },
  {
    "id": "morris-counter",
    "title": "Morris's Algorithm for Approximate Counting",
    "description": "Morris' Algorithm counts a large number of events using a very small space O(log log n). The algorithm uses probabilistic techniques to increment the counter and in this essay, we take a detailed look at Morris' Algorithm and the math behind it.",
    "image": "https://user-images.githubusercontent.com/4745789/89116441-b9d0f300-d4b1-11ea-99e5-cca7c4cef5fb.png",
    "gif": "https://media.giphy.com/media/uWXxbGPMbFkxsni3tc/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "approximate counting",
      "morris counter",
      "hyperloglog",
      "morris algorithm"
    ],
    "published_at": "2020-08-02",
    "similar": [
      "copy-on-write",
      "rule-30",
      "slowsort",
      "phi-accrual"
    ]
  },
  {
    "id": "slowsort",
    "title": "Slowsort - A Pessimal Sorting Algorithm",
    "description": "Slowsort is a pessimal sorting algorithm based on the Multiply and Surrender paradigm. The algorithm is designed to be deterministically sub-optimal and it could easily be the worst way anyone could sort an array.",
    "image": "https://user-images.githubusercontent.com/4745789/88473025-fabb8b80-cf36-11ea-8390-a807fcd57d93.png",
    "gif": "https://media.giphy.com/media/3NtY188QaxDdC/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "slowsort",
      "pessimal algorithms",
      "slowsort vs bogosort",
      "worst sorting algorithm",
      "multiply and surrender"
    ],
    "published_at": "2020-07-26",
    "similar": [
      "flajolet-martin",
      "1d-terrain",
      "morris-counter",
      "inheritance-c"
    ]
  },
  {
    "id": "bitcask",
    "title": "Bitcask - A Log-Structured Fast KV Store",
    "description": "Bitcask is a Key-Value store that persists its data in append-only log files and still reaps super-performant read-write throughputs. In this essay, we take a detailed look into Bitcask, its design, and find the secret sauce that makes it so performant.",
    "image": "https://user-images.githubusercontent.com/4745789/87868516-144b5900-c9b4-11ea-91e3-2de14e80817b.png",
    "gif": "https://media.giphy.com/media/l0NwF1dnk7GRz3pK0/giphy.gif",
    "categories": [
      "databases"
    ],
    "tags": [
      "database",
      "embedded database",
      "key value store",
      "log structured database"
    ],
    "published_at": "2020-07-19",
    "similar": [
      "2q-cache",
      "phi-accrual",
      "copy-on-write",
      "ts-smoothing"
    ]
  },
  {
    "id": "phi-accrual",
    "title": "Phi \u03c6 Accrual Failure Detection",
    "description": "Phi \u03c6 Accrual Failure Detection algorithm, unlike conventional algorithms, is an adaptive failure detection algorithm that instead of providing output as a boolean (system being up or down), outputs the suspicion information (level) on a continuous scale.",
    "image": "https://user-images.githubusercontent.com/4745789/87240958-c5de0d80-c43b-11ea-8e1b-2a7c70586b9b.png",
    "gif": "https://media.giphy.com/media/gLoMzjGQB2tQlQtB9P/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [
      "distributed systems",
      "heartbeat algorithm",
      "failure detection"
    ],
    "published_at": "2020-07-12",
    "similar": [
      "copy-on-write",
      "morris-counter",
      "bitcask",
      "isolation-forest"
    ]
  },
  {
    "id": "decipher-repeated-key-xor",
    "title": "Deciphering Repeated-key XOR Ciphertext",
    "description": "Deciphering is the process of recovering the original message from an encrypted byte stream, usually, without having any knowledge of the encryption key. In this essay, we look at how we can use Hamming Distance, Linguistics to recover the original message from a Repeated-key XORed Ciphertext.",
    "image": "https://user-images.githubusercontent.com/4745789/86505243-d52bde00-bddf-11ea-9fb2-bd9c25e51bd4.png",
    "gif": "https://media.giphy.com/media/b5Hcaz7EPz26I/giphy.gif",
    "categories": [
      "cryptography"
    ],
    "tags": [
      "python",
      "cryptography",
      "cryptopals"
    ],
    "published_at": "2020-07-04",
    "similar": [
      "decipher-single-xor",
      "bayesian-average",
      "isolation-forest",
      "efficient-way-to-stop-an-iterating-loop"
    ]
  },
  {
    "id": "decipher-single-xor",
    "title": "Deciphering Single-byte XOR Ciphertext",
    "description": "Deciphering is the process of recovering the original message from an encrypted byte stream, usually, without having any knowledge of the encryption key. In this essay, we look at how we can use linguistics to recover the original message from a Single-byte XORed Ciphertext.",
    "image": "https://user-images.githubusercontent.com/4745789/85223233-0ddeb700-b3df-11ea-9bb8-5bd1cf0cabcb.png",
    "gif": "https://media.giphy.com/media/l3vRmVv5P01I5NDAA/giphy.gif",
    "categories": [
      "cryptography"
    ],
    "tags": [
      "python",
      "cryptography",
      "cryptopals"
    ],
    "published_at": "2020-06-21",
    "similar": [
      "decipher-repeated-key-xor",
      "bayesian-average",
      "isolation-forest",
      "efficient-way-to-stop-an-iterating-loop"
    ]
  },
  {
    "id": "python-iterable-integers",
    "title": "Making Python Integers Iterable",
    "description": "In Python, Integers are not iterables but we can make them iterable by implementing __iter__ function. In this essay, we change Python's source code and implement iter function for integers.",
    "image": "https://user-images.githubusercontent.com/4745789/84585100-bf06af80-ae29-11ea-8797-16c70aee5cc4.png",
    "gif": "https://media.giphy.com/media/k4ta29T68xlfi/giphy.gif",
    "categories": [
      "python"
    ],
    "tags": [],
    "published_at": "2020-06-14",
    "similar": [
      "fsm",
      "python-caches-integers",
      "i-changed-my-python",
      "python-prompts"
    ]
  },
  {
    "id": "inheritance-c",
    "title": "Powering Inheritance in C using Structure Composition",
    "description": "C language does not support inheritance however it does support Structure Compositions which can be tweaked to serve use-cases requiring parent-child relationships. In this article we find out how Structure Compositions help us emulate inheritance in C and keep our code extensible. We will also find how it powers two of the most important things to have ever been invented in the field of computer science.",
    "image": "https://user-images.githubusercontent.com/4745789/83960768-2bbdff00-a8aa-11ea-9e82-16b928d2a244.png",
    "gif": "https://media.giphy.com/media/3o6Mbk7C7HVuhyqX3G/giphy.gif",
    "categories": [
      "engineering"
    ],
    "tags": [],
    "published_at": "2020-06-07",
    "similar": [
      "mongodb-cursor-skip-is-slow",
      "slowsort",
      "idf",
      "morris-counter"
    ]
  },
  {
    "id": "rum",
    "title": "The RUM Conjecture",
    "description": "While designing any storage system the three main aspects we optimize for are Reads, Updates, and auxiliary Memory. RUM Conjecture states that these three form a competing triangle and we could only optimize two at the expense of the third.",
    "image": "https://user-images.githubusercontent.com/4745789/83344735-64009300-a328-11ea-858a-587d440136f1.png",
    "gif": "https://media.giphy.com/media/1n7B7bJ917pqZGHG9m/giphy.gif",
    "categories": [
      "engineering"
    ],
    "tags": [],
    "published_at": "2020-05-31",
    "similar": [
      "bitcask",
      "2q-cache",
      "mysql-cache",
      "phi-accrual"
    ]
  },
  {
    "id": "consistent-hashing",
    "title": "Consistent Hashing",
    "description": "Consistent Hashing is one of the most sought after techniques when it comes to designing highly scalable distributed systems. In this article, we dive deep into the need for Consistent Hashing, the internals of it, and more importantly along the way implement it using arrays and binary search.",
    "image": "https://user-images.githubusercontent.com/4745789/82760647-92efa400-9e12-11ea-9533-5003bc3c46df.png",
    "gif": "https://media.giphy.com/media/3ofSBqzxwsiN0npCak/giphy.gif",
    "categories": [
      "algorithms"
    ],
    "tags": [],
    "published_at": "2020-05-24",
    "similar": [
      "lfu",
      "isolation-forest",
      "rum",
      "phi-accrual"
    ]
  },
  {
    "id": "python-caches-integers",
    "title": "Integer Caching in Python",
    "description": "To gain a performance boost and avoid reallocation of frequently used integers, Python creates singleton instances of small integer values and uses them by reference.",
    "image": "https://user-images.githubusercontent.com/4745789/82141979-a620d380-9856-11ea-9a4a-32399c0c01b8.png",
    "gif": "https://media.giphy.com/media/l378kmO7gdbXaesXS/giphy.gif",
    "categories": [
      "python"
    ],
    "tags": [],
    "published_at": "2020-05-17",
    "similar": [
      "python-prompts",
      "i-changed-my-python",
      "python-iterable-integers",
      "fsm"
    ]
  },
  {
    "id": "fractional-cascading",
    "title": "Fractional Cascading - Speeding up Binary Searches",
    "description": "The performance of binary search when applied on k lists independently can be improved using bridges and the technique is called Fractional Cascading. Fractional Cascading also sees its application in Geometric Data Structures, Segment Trees, and Databases.",
    "image": "https://user-images.githubusercontent.com/4745789/82142043-352deb80-9857-11ea-9801-878d771248da.png",
    "gif": "https://media.giphy.com/media/1k5k3J5K3BywQOrpNA/giphy.gif",
    "categories": [
      "algorithm"
    ],
    "tags": [],
    "published_at": "2020-05-10",
    "similar": [
      "israeli-queues",
      "flajolet-martin",
      "slowsort",
      "morris-counter"
    ]
  },
  {
    "id": "copy-on-write",
    "title": "Copy-on-Write Semantics",
    "description": "Copy-on-write is used to model Time Travel, build databases with no locks, and makes the fork system call super-efficient.",
    "image": "https://user-images.githubusercontent.com/4745789/80913860-73121680-8d65-11ea-87f8-d02460f05a22.png",
    "gif": "https://media.giphy.com/media/GIrIC3g657AYg/giphy.gif",
    "categories": [
      "engineering"
    ],
    "tags": [],
    "published_at": "2020-05-03",
    "similar": [
      "phi-accrual",
      "morris-counter",
      "slowsort",
      "isolation-forest"
    ]
  },
  {
    "id": "mysql-cache",
    "title": "Midpoint Insertion Strategy in MySQL LRU Cache",
    "description": "The MySQL InnoDB Storage engine uses LRU cache but it suffers from a notorious problem. In this article, we find how by using Midpoint Insertion Strategy and changing one aspect of LRU, MySQL becomes scan resistant and super performant.",
    "image": "https://user-images.githubusercontent.com/4745789/80304802-0ed7db80-87d6-11ea-98db-bc5d4afe965b.png",
    "gif": "https://media.giphy.com/media/daUOBsa1OztxC/giphy.gif",
    "categories": [
      "mysql",
      "algorithm"
    ],
    "tags": [],
    "published_at": "2020-04-26",
    "similar": [
      "2q-cache",
      "ts-smoothing",
      "image-steganography",
      "better-programmer"
    ]
  },
  {
    "id": "fsm",
    "title": "Building Finite State Machines with Python Coroutines",
    "description": "The most intuitive way of building and implementing Finite State Machines is by using Python Coroutines and in this article, we find how and why.",
    "image": "https://user-images.githubusercontent.com/4745789/79684359-3ebf3600-824e-11ea-97cc-0f06c2919aeb.png",
    "gif": "https://media.giphy.com/media/KhdQ2Ia3FJuKs/giphy.gif",
    "categories": [
      "python"
    ],
    "tags": [],
    "published_at": "2020-04-19",
    "similar": [
      "i-changed-my-python",
      "python-iterable-integers",
      "python-prompts",
      "python-caches-integers"
    ]
  },
  {
    "id": "bayesian-average",
    "title": "Better Ranking using Bayesian Average",
    "description": "Ranking a list of movies, products, books or even restaurants is tricky and in this article, we find what works for such a rating system and the math behind it.",
    "image": "https://user-images.githubusercontent.com/4745789/78990379-ebfdc400-7b53-11ea-88b7-cd64e39eabf6.png",
    "gif": "https://media.giphy.com/media/dJ4vNQ7r72pb4nDhN5/giphy.gif",
    "categories": [
      "statistics"
    ],
    "tags": [],
    "published_at": "2020-04-12",
    "similar": [
      "efficient-way-to-stop-an-iterating-loop",
      "fast-and-efficient-pagination-in-mongodb",
      "1d-terrain",
      "publish-python-package-on-pypi"
    ]
  },
  {
    "id": "sliding-window-ratelimiter",
    "title": "Sliding Window based Rate Limiter",
    "description": "A rate limiter is used to control the rate of traffic sent or received on the network and in this article we dive deep and design a sliding window based rate limiter.",
    "image": "https://user-images.githubusercontent.com/4745789/78276848-3c13cf80-7531-11ea-8186-99cb1da58e50.png",
    "gif": "https://media.giphy.com/media/5YuhLwDgrgtRVwI7OY/giphy.gif",
    "categories": [
      "algorithm"
    ],
    "tags": [],
    "published_at": "2020-04-05",
    "similar": [
      "multiple-mysql-on-same-server-using-docker",
      "setting-up-graphite-grafana-using-nginx-on-ubuntu",
      "setting-up-graphite-using-nginx-on-ubuntu",
      "image-steganography"
    ]
  },
  {
    "id": "idf",
    "title": "Inverse Document Frequency",
    "description": "TF-IDF is extensively used in search engines and in various document classification and clustering techniques. Instead of taking the formula by the word, we take a detour and dive deep into the better half of it and find its connection with Probability, the role it plays in document relevance and the intuition behind it.",
    "image": "https://user-images.githubusercontent.com/4745789/76207579-10e4db80-6224-11ea-91ba-b67359125156.png",
    "gif": "https://media.giphy.com/media/3ornjWIRSzXEw61KH6/giphy.gif",
    "categories": [
      "algorithm"
    ],
    "tags": [
      "tfidf",
      "idf",
      "inverse document frequency",
      "term frequency inverse document frequency",
      "term frequency",
      "understanding tfidf",
      "understanding idf",
      "math behind tfidf",
      "math behind idf",
      "idf as probability"
    ],
    "published_at": "2020-03-06",
    "similar": [
      "jaccard-minhash",
      "1d-terrain",
      "mongodb-cursor-skip-is-slow",
      "inheritance-c"
    ]
  },
  {
    "id": "better-programmer",
    "title": "Eight Rituals to be a Better Programmer",
    "description": "\"How to get better at programming?\" is the question I had been asked quite a few times, and today I lay down the 8 rituals I have been following, and action items for each, to be good and get better at programming.",
    "image": "https://user-images.githubusercontent.com/4745789/75548769-0cfecf80-5a54-11ea-8dd2-1e452ba1298b.png",
    "gif": "https://media.giphy.com/media/14gQ5vtwD050LC/giphy.gif",
    "categories": [
      "productivity"
    ],
    "tags": [
      "better programmer",
      "todo of better programmer",
      "good programmer",
      "get better at programming",
      "top coder",
      "codechef",
      "hackerrank"
    ],
    "published_at": "2020-02-28",
    "similar": [
      "ts-smoothing",
      "fast-and-efficient-pagination-in-mongodb",
      "benchmark-and-compare-pagination-approach-in-mongodb",
      "how-sleepsort-helped-me-understand-concurrency-in-golang"
    ]
  },
  {
    "id": "python-prompts",
    "title": "Personalize your Python Prompt",
    "description": "Personalization is what we all love. In this article we find how we could personalize the Python interpreter prompt >>>",
    "image": "https://user-images.githubusercontent.com/4745789/74850923-8ade1f00-5360-11ea-8ed5-1072c8a718c2.png",
    "gif": "https://media.giphy.com/media/TFTqzyOQwT2zS/giphy.gif",
    "categories": [
      "python"
    ],
    "tags": [
      "python",
      "interpreter",
      "prompt",
      "customize",
      "personalize",
      "colorize",
      "ps1",
      "ps2",
      "fun"
    ],
    "published_at": "2020-02-21",
    "similar": [
      "i-changed-my-python",
      "python-caches-integers",
      "fsm",
      "super-long-integers"
    ]
  },
  {
    "id": "rule-30",
    "title": "Pseudorandom Numbers using Cellular Automata - Rule 30",
    "description": "Generating pseudorandom numbers is an interesting problem in Computer Science. In this article, we dive deep into an algorithm for generating pseudorandom numbers using Rule 30 of Cellular Automaton.",
    "image": "https://user-images.githubusercontent.com/4745789/74463952-b07aac80-4eb8-11ea-8d8e-6f286767ec7e.png",
    "gif": "https://media.giphy.com/media/26uflDxU6cEhrhmUg/giphy.gif",
    "categories": [
      "algorithm"
    ],
    "tags": [
      "algorithm",
      "cellular automata",
      "rule 30",
      "pseudorandom number generator",
      "random numbers",
      "elementary cellular automata",
      "1d cellular automata"
    ],
    "published_at": "2020-02-14",
    "similar": [
      "efficient-way-to-stop-an-iterating-loop",
      "morris-counter",
      "how-sleepsort-helped-me-understand-concurrency-in-golang",
      "fast-and-efficient-pagination-in-mongodb"
    ]
  },
  {
    "id": "function-overloading",
    "title": "Function Overloading in Python",
    "description": "Python natively does not support function overloading - having multiple functions with the same name. Today we see how we can implement and add this functionality to Python by using common language constructs like decorators and dictionaries.",
    "image": "https://user-images.githubusercontent.com/4745789/73909201-04423000-48d2-11ea-8bd0-d7c25f6435c1.png",
    "gif": "https://media.giphy.com/media/WtCHRSPCuqS8E/giphy.gif",
    "categories": [
      "python"
    ],
    "tags": [
      "python",
      "function overloading",
      "language constructs",
      "decorator",
      "function",
      "namespace",
      "advanced python"
    ],
    "published_at": "2020-02-07",
    "similar": [
      "recursion-visualizer",
      "python-iterable-integers",
      "fsm",
      "i-changed-my-python"
    ]
  },
  {
    "id": "isolation-forest",
    "title": "Isolation Forest Algorithm for Anomaly Detection",
    "description": "Anomaly detection is an age-old problem and in this article, we dive deep into an unsupervised algorithm, Isolation Forest, that beautifully exploits the characteristics of anomalies. Instead of profiling normal points and labeling others as anomalies, the algorithm is actually is tuned to detect anomalies.",
    "image": "https://user-images.githubusercontent.com/4745789/73280907-34743980-4215-11ea-89f0-eac4a71df6e5.png",
    "gif": "https://media.giphy.com/media/xGdvlOVSWaDvi/giphy.gif",
    "categories": [
      "algorithm",
      "data science"
    ],
    "tags": [
      "algorithm",
      "machine learning",
      "anomaly detection",
      "data science",
      "artificial intelligence",
      "ml",
      "ds",
      "ai",
      "unsupervised algorithm",
      "fast anomaly detection",
      "efficient anomaly detection"
    ],
    "published_at": "2020-01-28",
    "similar": [
      "slowsort",
      "copy-on-write",
      "1d-terrain",
      "phi-accrual"
    ]
  },
  {
    "id": "image-steganography",
    "title": "Image Steganography",
    "description": "Steganography has been around since at least 440 BCE but with the rise of computers, the techniques have evolved to handle digital data. In this article, we see the science behind image steganography, how it exploits various properties of images to hide secrets and walkthrough a few techniques in detail.",
    "image": "https://user-images.githubusercontent.com/4745789/72659471-2a1c9900-39e6-11ea-9b93-c11bf3eefc43.png",
    "gif": "https://media.giphy.com/media/V1NxC1YoNEHBe/giphy.gif",
    "categories": [
      "steganography",
      "image"
    ],
    "tags": [
      "steganography",
      "image steganography",
      "image steganography internals",
      "DCT JPEG",
      "JPEG",
      "LSB",
      "Least Significant Bit Substitution",
      "Adaptive Least Significant Bit Substitution",
      "ancient greece",
      "Discrete Cosine Transform",
      "Discrete Fourier Transform",
      "Lossy and Lossless image formats",
      "rgb color model",
      "YCbCr color model",
      "technology",
      "code",
      "data science",
      "tech"
    ],
    "published_at": "2020-01-17",
    "similar": [
      "ts-smoothing",
      "multiple-mysql-on-same-server-using-docker",
      "2q-cache",
      "benchmark-and-compare-pagination-approach-in-mongodb"
    ]
  },
  {
    "id": "super-long-integers",
    "title": "Super Long Integers in Python",
    "description": "Python must be doing something beautiful internally to support super long integers and today we find out what's under the hood. The article goes in-depth to explain design, storage, and operations on super long integers as implemented by Python.",
    "image": "https://user-images.githubusercontent.com/4745789/72040055-55f49c00-32cd-11ea-9190-8f5a67c2f3d9.png",
    "gif": "https://media.giphy.com/media/SKGo6OYe24EBG/giphy.gif",
    "categories": [
      "programming",
      "python",
      "python internals"
    ],
    "tags": [
      "programming",
      "python",
      "cpython source code",
      "python internals",
      "understanding python source code",
      "coding",
      "developer",
      "technology",
      "code",
      "pythonprogramming",
      "python programming",
      "data science",
      "tech"
    ],
    "published_at": "2020-01-10",
    "similar": [
      "python-prompts",
      "publish-python-package-on-pypi",
      "i-changed-my-python",
      "python-caches-integers"
    ]
  },
  {
    "id": "i-changed-my-python",
    "title": "Changing Python",
    "description": "I changed the Python's source code and made addition incorrect and unpredictable. The addition operation will internally perform either Subtraction. Multiplication, Floor Division or Power at random.",
    "image": "https://user-images.githubusercontent.com/4745789/71662123-60b3ac00-2d76-11ea-8018-f558cef93a59.png",
    "gif": "https://media.giphy.com/media/aZ5wedD7Jtazm/giphy.gif",
    "categories": [
      "programming",
      "python",
      "python internals"
    ],
    "tags": [
      "programming",
      "python",
      "cpython source code",
      "python internals",
      "understanding python source code",
      "coding",
      "developer",
      "technology",
      "code",
      "pythonprogramming",
      "python programming",
      "data science",
      "tech"
    ],
    "published_at": "2020-01-03",
    "similar": [
      "python-prompts",
      "fsm",
      "python-caches-integers",
      "python-iterable-integers"
    ]
  },
  {
    "id": "efficient-way-to-stop-an-iterating-loop",
    "title": "Stop an Iterating Loop",
    "description": "There are two ways through which we can stop an iterating loop, first by using break statement and second by making loop condition false. Let's see if one is better than the other.",
    "image": "https://user-images.githubusercontent.com/4745789/64327846-02ee9d80-cfea-11e9-8698-4a18bfe76068.png",
    "gif": "https://media.giphy.com/media/cKKXNlTYino7hWNXwl/giphy.gif",
    "categories": [
      "programming",
      "benchmark"
    ],
    "tags": [
      "programming",
      "benchmark",
      "efficient way to stop loop",
      "break or condition",
      "efficient for loop"
    ],
    "published_at": "2019-09-06",
    "similar": [
      "fast-and-efficient-pagination-in-mongodb",
      "rule-30",
      "bayesian-average",
      "better-programmer"
    ]
  },
  {
    "id": "fast-and-efficient-pagination-in-mongodb",
    "title": "Fast and Efficient Pagination in MongoDB",
    "description": "MongoDB is a document based data store and hence pagination is one of the most common use case of it. Find out how you can paginate the results ...",
    "image": "https://user-images.githubusercontent.com/4745789/63153080-1336dc80-c02b-11e9-931f-0c7552a63ebc.png",
    "gif": "https://media.giphy.com/media/lRnUWhmllPI9a/giphy.gif",
    "categories": [
      "database",
      "mongodb",
      "scale"
    ],
    "tags": [
      "mongodb",
      "scalability",
      "pagination",
      "fast",
      "scale",
      "mongodb skip limit",
      "mongodb skip limit fast pagination"
    ],
    "published_at": "2017-06-06",
    "similar": [
      "efficient-way-to-stop-an-iterating-loop",
      "better-programmer",
      "rule-30",
      "publish-python-package-on-pypi"
    ]
  },
  {
    "id": "benchmark-and-compare-pagination-approach-in-mongodb",
    "title": "Benchmark Pagination Strategies in MongoDB",
    "description": "Benchmark results for two pagination approaches for MongoDB.",
    "image": "https://user-images.githubusercontent.com/4745789/63220759-d514f680-c1ab-11e9-8a38-7b1828946b74.png",
    "gif": "https://media.giphy.com/media/c5eqVJN7oNLTq/giphy.gif",
    "categories": [
      "database",
      "mongodb",
      "benchmark"
    ],
    "tags": [
      "mongodb",
      "scalability",
      "pagination",
      "fast",
      "scale",
      "mongodb skip limit",
      "mongodb skip limit fast pagination",
      "benchmark results"
    ],
    "published_at": "2017-06-02",
    "similar": [
      "how-sleepsort-helped-me-understand-concurrency-in-golang",
      "better-programmer",
      "ts-smoothing",
      "image-steganography"
    ]
  },
  {
    "id": "mongodb-cursor-skip-is-slow",
    "title": "Why MongoDB's cursor.skip() is Slow?",
    "description": "MongoDB's cursor.skip() is very inefficient, why is that? Even though it is slow and inefficient,  team MongoDB wants to continue keeping it. Find out why ...",
    "image": "https://user-images.githubusercontent.com/4745789/63220620-4d2ded00-c1a9-11e9-8eea-11766291e06f.png",
    "gif": "https://media.giphy.com/media/nqIuAIxYebIt2/giphy.gif",
    "categories": [
      "database",
      "mongodb"
    ],
    "tags": [
      "mongodb",
      "cursor",
      "slow",
      "mongodb cursor slow",
      "mongodb skip limit"
    ],
    "published_at": "2017-06-04",
    "similar": [
      "inheritance-c",
      "idf",
      "jaccard-minhash",
      "1d-terrain"
    ]
  },
  {
    "id": "how-sleepsort-helped-me-understand-concurrency-in-golang",
    "title": "Sleepsort and Concurrency in Golang",
    "description": "Understanding concurrency in any programming language is tricky let alone Golang; hence to get my hands dirty the first thing I usually implement is sleepsort.",
    "image": "https://user-images.githubusercontent.com/4745789/63222328-203b0380-c1c4-11e9-9dd0-34c4bd9d1c6b.png",
    "gif": "https://media.giphy.com/media/QmJ3e9So5M9NdNkOGo/giphy.gif",
    "categories": [
      "golang",
      "programming",
      "concurrency"
    ],
    "tags": [
      "golang",
      "programming",
      "concurrency",
      "sleepsort",
      "concurrency in golang",
      "sleepsort in golang"
    ],
    "published_at": "2017-07-16",
    "similar": [
      "benchmark-and-compare-pagination-approach-in-mongodb",
      "rule-30",
      "better-programmer",
      "fast-and-efficient-pagination-in-mongodb"
    ]
  },
  {
    "id": "making-http-requests-using-netcat",
    "title": "HTTP Requests using Netcat",
    "description": "All our lives we have been hitting REST APIs with libraries and utilities like curl and postman. Its time we do it the hard way with netcat, just for fun!",
    "image": "https://user-images.githubusercontent.com/4745789/63222693-a5c0b280-c1c8-11e9-9cd4-808225e579f3.png",
    "gif": "https://media.giphy.com/media/2tSodgDfwCjIMCBY8h/giphy.gif",
    "categories": [
      "python",
      "programming"
    ],
    "tags": [
      "netcat",
      "python",
      "flask",
      "netcat with flask"
    ],
    "published_at": "2017-07-05",
    "similar": [
      "setting-up-graphite-grafana-using-nginx-on-ubuntu",
      "sliding-window-ratelimiter",
      "multiple-mysql-on-same-server-using-docker",
      "setting-up-graphite-using-nginx-on-ubuntu"
    ]
  },
  {
    "id": "multiple-mysql-on-same-server-using-docker",
    "title": "Multiple MySQL server running on same Ubuntu server",
    "description": "Have multiple MySQL versions running on same server within 5 minutes.",
    "image": "https://user-images.githubusercontent.com/4745789/63222993-74e27c80-c1cc-11e9-8229-dd7e5d4f1173.png",
    "gif": "https://media.giphy.com/media/GIrIC3g657AYg/giphy.gif",
    "categories": [
      "mysql",
      "database",
      "docker",
      "devops"
    ],
    "tags": [
      "devops",
      "database",
      "docker",
      "mysql",
      "running mysql using docker"
    ],
    "published_at": "2016-05-13",
    "similar": [
      "sliding-window-ratelimiter",
      "setting-up-graphite-grafana-using-nginx-on-ubuntu",
      "setting-up-graphite-using-nginx-on-ubuntu",
      "image-steganography"
    ]
  },
  {
    "id": "setting-up-graphite-using-nginx-on-ubuntu",
    "title": "Setting up Graphite using Nginx on an Ubuntu server",
    "description": "Part 1: Monitor your production systems and application analytics using Graphite. This article will help you setup these tools on Ubuntu 14.04 on a Nginx webserver with PostgreSQL as backend.",
    "image": "https://user-images.githubusercontent.com/4745789/63223138-c68c0680-c1ce-11e9-942b-60b92d3f8a28.png",
    "gif": "https://media.giphy.com/media/l4FGzAPvg5PbZrVlK/giphy.gif",
    "categories": [
      "devops"
    ],
    "tags": [
      "devops",
      "ubuntu",
      "graphite on ubuntu",
      "graphite and nginx on ubuntu"
    ],
    "published_at": "2015-12-14",
    "similar": [
      "setting-up-graphite-grafana-using-nginx-on-ubuntu",
      "sliding-window-ratelimiter",
      "multiple-mysql-on-same-server-using-docker",
      "making-http-requests-using-netcat"
    ]
  },
  {
    "id": "setting-up-graphite-grafana-using-nginx-on-ubuntu",
    "title": "Setting up Graphite and Grafana on an Ubuntu server",
    "description": "Part 2: Monitor your production systems and application analytics using Graphite. This article will help you setup these tools on Ubuntu 14.04 on a Nginx webserver with PostgreSQL as backend.",
    "image": "https://user-images.githubusercontent.com/4745789/63223314-e58b9800-c1d0-11e9-83d8-e263ce3eb874.png",
    "gif": "https://media.giphy.com/media/Me1GB9z50XUKQ/giphy.gif",
    "categories": [
      "devops"
    ],
    "tags": [
      "devops",
      "ubuntu",
      "grafana",
      "graphite and grafana on ubuntu",
      "grafana and graphite and nginx on ubuntu"
    ],
    "published_at": "2015-12-14",
    "similar": [
      "multiple-mysql-on-same-server-using-docker",
      "sliding-window-ratelimiter",
      "setting-up-graphite-using-nginx-on-ubuntu",
      "making-http-requests-using-netcat"
    ]
  },
  {
    "id": "publish-python-package-on-pypi",
    "title": "Publish python package on PyPI",
    "description": "If you have written something cool in Python and want to make it installable via pip and easy_install, this post will help you publish your python online.",
    "image": "https://user-images.githubusercontent.com/4745789/63223433-e45b6a80-c1d2-11e9-921f-c2cc0153cf4a.png",
    "gif": "https://media.giphy.com/media/TfKfqjt2i4GIM/giphy.gif",
    "categories": [
      "python"
    ],
    "tags": [
      "python",
      "publish python package",
      "pypi"
    ],
    "published_at": "2015-11-10",
    "similar": [
      "super-long-integers",
      "fast-and-efficient-pagination-in-mongodb",
      "how-sleepsort-helped-me-understand-concurrency-in-golang",
      "bayesian-average"
    ]
  }
]